<languageVersion : 1.0;>

kernel untitled
<   namespace : "Your Namespace";
    vendor : "Your Vendor";
    version : 1;
    
    
    
>


{
    input image4 src;
    output pixel4 dst;
    parameter float resolution
    <       
        minValue:float(0.);
        maxValue:float(1920.); 
        defaultValue:float(1000.);
    >;
    
        
    parameter float c_real 
    <       
        minValue:float(-2.);
        maxValue:float(2.); 
        defaultValue:float(0.);
    >;
    
        parameter float c_im 
    <       
        minValue:float(-2.);
        maxValue:float(2.); 
        defaultValue:float(0.);
    >;
float julia(float2 pos, float2 c) {

	//per-pixel cycle

	float R_esc = 3.9;	
	float color;
	int i_max = 40;
	
	for(int i = 0; i < i_max; i++ ) {
	
    float xtemp = (pos.x * pos.x - pos.y * pos.y);
		pos.y = 1. * pos.x * pos.y + c.y;
		pos.x = xtemp + c.x;
		
		if(abs(pos.x * pos.x + pos.y * pos.y) > R_esc * R_esc) {
			break;
		}
    
		int val = i;
		color = float(val);
	}
	
	return color;
}
    void
    evaluatePixel()
    
    {
     
        float2 uv = (outCoord()/resolution);
        float juliaCoef = julia(uv, float2(c_real,c_im));
        dst = sampleLinear(src,outCoord()) * float4(juliaCoef);
    }
}
